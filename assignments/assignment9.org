
Tasks [2/2]

    [x] Create a assignment9.org file in your assignment repository and document any tool or method you used in this assignment. [20]
    [x] Download assignment9.pcap from the reference section, and find the answer to the following questions: [80]
        How many unique IP addresses are in the PCAP? [15, 8 points for the final answer]
          - There are 223 unique IPv4 addresses in the PCAP file.
        What's the IP that's leaking the information? [15, 8 points for the final answer]
          - It is 192.168.64.137.
        What's the IP address of the receiver? [15, 8 points for the final answer]
          - It is 138.197.108.176.
        What's the leaked flag? [35, 15 points for the final answer]
          - The leaked flag is SKY-EMNI-5857.
Documentation:
- To start, I'm rather naturally using wireshark to view the contents of the PCAP file. Wireshark's Endpoints tool in the analysis tells me that there are 223 unique IPv4 addresses in the file, so it is now on to figure out which one is leaking information.
- It has been over two hours. I have tried looking at conversations in Wireshark (where I found out the IP I believe is the local host (192.168.64.137) likes BitTorrent), using 'strings' to see the (countless) strings in the PCAP, and 'foremost' in the stego toolkit to try to extract files. I got 4 GIFs (apparently from a webpage, given their size and appearance) and an entirely black PDF, so it appears to have been less than useful.
- In the end, it was simply Wireshark that was helpful. 192.168.64.137 and 138.197.108.176 have a series of ICMP packets that did not match the typical string (the ASCII alphabet, punctuation and numbers, or a similar standard string) of a ICMP ping. This is the leak; now to find the flag. (At least I was right, and 192.168.64127 _is_ the leak. It just took me a while to confirm.)
- It took me far too long given my task (and the fact we went over this yesterday in class), but 'getflag.py' (at '../getflag.py' here in the repository) gets the data from all ICMP packets sent from 192.168.64.137 to 138.197.108.176 and deposits said data into a file. Now to use xxd to convert this from hex data to binary to a PNG.
- An update: xxd is not on my system, because I do not use vim at all and apparently it doesn't actually come standard with the typical Linux bash environment. It is now installed, along with vim, which I will probably continue to never use.
- Another update: the raw data as output by scapy is in an odd format that necesitated converting it to a hex string before converting _that_ into a printable string in order to make a viewable PNG from the data. This took far longer than I would have liked to figure out, but it's done now and I have the flag, thanks mainly to 'binascii.hexlify()' and then xxd. All my answers are above.
